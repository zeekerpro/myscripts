#!/bin/bash

# Script Name: manage_postgres_versions.sh
# Description: Manages PostgreSQL versions ensuring only one instance runs at a time.
#              Displays data and log paths to the user and uses direct PostgreSQL commands.
# Usage: ./manage_postgres_versions.sh [command] [version]
# Example: ./manage_postgres_versions.sh start 13.3
# Author: ShellScriptor
# Creation Date: YYYY-MM-DD

PGDATA_BASE_PATH="$HOME/.asdf/installs/postgres"

# Retrieves the full path to the PostgreSQL command for the specified version
get_pg_command_path() {
    local version="$1"
    local command="$2"
    echo "$HOME/.asdf/installs/postgres/$version/bin/$command"
}

# Stops all running PostgreSQL instances except for the version provided as an argument
stop_other_postgres_instances() {
    local skip_version="$1"
    echo "Checking for other running PostgreSQL instances..."
    local versions=$(asdf list postgres | sed 's/[* ]//g')

    for version in $versions; do
        if [ "$version" == "$skip_version" ]; then
            continue
        fi

        local PGDATA="${PGDATA_BASE_PATH}/$version/data"
        if [ ! -d "$PGDATA" ]; then
            continue
        fi

        local pg_ctl_path=$(get_pg_command_path "$version" "pg_ctl")
        local status_output=$("$pg_ctl_path" -D "${PGDATA}" status)

        if [[ $status_output != *"no server running"* ]]; then
            echo "Stopping PostgreSQL version $version..."
            "$pg_ctl_path" -D "$PGDATA" stop
        fi
    done
}

# Lists installed PostgreSQL versions and their status
list_versions() {
    echo "Listing installed PostgreSQL versions and their statuses:"
    local versions=$(asdf list postgres | sed 's/[* ]//g')

    for version in $versions; do
        local PGDATA="${PGDATA_BASE_PATH}/$version/data"

        if [ ! -d "$PGDATA" ]; then
            echo "PostgreSQL version $version: Data directory not found"
            continue
        fi

        local pg_ctl_path=$(get_pg_command_path "$version" "pg_ctl")
        local status_output=$("$pg_ctl_path" -D "${PGDATA}" status)

        if [[ $status_output == *"no server running"* ]]; then
            echo "PostgreSQL version $version: Stopped"
        else
            echo "PostgreSQL version $version: Running"
        fi
    done
}

# Installs a new PostgreSQL version
install_version() {
    local version="$1"
    if [ -z "$version" ]; then
        echo "Error: No version specified. Please specify a version to install."
        exit 1
    fi

    echo "Installing PostgreSQL version $version..."
    asdf plugin-add postgres || true
    asdf install postgres "$version"
    echo "PostgreSQL version $version installation attempted."
}

# Sets a global PostgreSQL version
set_global_version() {
    local version="$1"
    if [ -z "$version" ]; then
        echo "Error: No version specified. Please specify a version to set as global."
        exit 1
    fi

    echo "Setting PostgreSQL version $version as global..."
    asdf global postgres "$version"
}

# Manages PostgreSQL versions with direct command execution
manage_postgres() {
    local action="$1"
    local version=$(echo "$2" | sed 's/[* ]//g')

    if [ -z "$version" ]; then
        echo "Error: No version specified. Please specify a PostgreSQL version to $action."
        exit 1
    fi

    local PGDATA="${PGDATA_BASE_PATH}/$version/data"
    local PGLOGDIR="${PGDATA_BASE_PATH}/$version/log"
    local PGLOG="${PGLOGDIR}/pg.log"
    mkdir -p "$PGDATA" "$PGLOGDIR"

    local pg_ctl_path=$(get_pg_command_path "$version" "pg_ctl")

    echo "Data directory: $PGDATA"
    echo "Log directory: $PGLOGDIR"

    case "$action" in
        start)
            stop_other_postgres_instances "$version"
            if [ -z "$(ls -A "$PGDATA")" ]; then
                echo "Initializing database cluster in $PGDATA..."
                local initdb_path=$(get_pg_command_path "$version" "initdb")
                "$initdb_path" -D "$PGDATA"
            fi
            echo "Starting PostgreSQL version $version..."
            "$pg_ctl_path" -D "$PGDATA" -l "$PGLOG" start
            ;;
        stop)
            echo "Stopping PostgreSQL version $version..."
            "$pg_ctl_path" -D "$PGDATA" stop
            ;;
        restart)
            stop_other_postgres_instances "$version"
            echo "Restarting PostgreSQL version $version..."
            "$pg_ctl_path" -D "$PGDATA" stop
            sleep 1 # Ensure stop completes
            "$pg_ctl_path" -D "$PGDATA" -l "$PGLOG" start
            ;;
    esac
}

# Main script logic
case "$1" in
    list)
        list_versions
        ;;
    install)
        install_version "$2"
        ;;
    global)
        set_global_version "$2"
        ;;
    start|stop|restart)
        manage_postgres "$1" "$2"
        ;;
    *)
        echo "Usage: $0 {list|install|global|start|stop|restart} [version]"
        echo "Commands:"
        echo "  list - List installed PostgreSQL versions and their statuses"
        echo "  install [version] - Install a new PostgreSQL version"
        echo "  global [version] - Set a PostgreSQL version as global"
        echo "  start [version] - Start a specific PostgreSQL version"
        echo "  stop [version] - Stop a specific PostgreSQL version"
        echo "  restart [version] - Restart a specific PostgreSQL version"
        exit 1
        ;;
esac

exit 0

